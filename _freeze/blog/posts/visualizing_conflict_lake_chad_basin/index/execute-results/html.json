{
  "hash": "7b58b208386e3070a46f05a91b0a1b5a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing armed conflict using ACLED's data and HDX shapefiles\"\nsubtitle: \"Using {ggplot2} and {tidyverse} to map violence against civilians in the Lake Chad Basin\"\nauthor: \n - name: \n    given: Juan Armando \n    family: Torres Mungu√≠a\ndate: \"2025-03-09\"\ncategories: \n - data visualization\n - armed conflict\n - ACLED\n - Lake Chad basin\n - Nigeria\n - Niger\n - Chad\n - Cameroon\n - ggplot2\n\nimage: \"lake-chad-map.png\"\ntitle-block-banner: false\ncitation: true\nexecute: \n  freeze: true\nformat: \n  html: \n    page-layout: article\ncomments:\n  utterances: \n    repo: jatorresmunguia/juan-torresmunguia.github.io\n---\n\n\n## Overview\n[ACLED (Armed Conflict Location & Event Data Project)](https://acleddata.com/) provides detailed data on political violence and protest events across the globe. This blog post explores the visualization of armed conflict in the Lake Chad Basin, focusing on the dynamics of violence against civilians in the region. Using ACLED's data in combination with shapefiles from the [Humanitarian Data Exchange (HDX) initiative](https://data.humdata.org/) of the United Nations Office for the Coordination of Humanitarian Affairs (OCHA), we leverage {ggplot2}, {sf} and the {tidyverse} to create insightful maps that highlight the impact of armed conflict. \n\n## Set-up\nLoad necessary libraries for data processing and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # For data manipulation and visualization\nlibrary(sf) # For handling spatial data\nlibrary(ggplot2) # For data visualization\nlibrary(patchwork) # For combining plots\nlibrary(ggtext) # Use rich text elements in ggplot\nlibrary(showtext) # Add custom fonts to plots\nlibrary(ggspatial) # For interacting with spatial data using ggplot2\nlibrary(rnaturalearth) # To provide map data that can be visualized using other R packages\nlibrary(rnaturalearthdata) # To store data for the rnaturalearth package\n\n# Set environment to English (useful for date/time formatting)\ninvisible(Sys.setenv(LANG = \"en\"))\ninvisible(Sys.setlocale(\"LC_TIME\", \"English\"))\n```\n:::\n\n\n## Loading data\nAccessing ACLED data requires registering on their [ACLED Access Portal](https://developer.acleddata.com/) to generate a unique access key. Once registered, you can download the data using their [Data Export Tool](https://acleddata.com/data-export-tool/). I downloaded all the events occurred in Africa since 1997 and save them in file `acled_africa_1997-2025.csv`. To have a better understanding of their data, they provide a [codebook](https://acleddata.com/acleddatanew/wp-content/uploads/dlm_uploads/2024/10/ACLED-Codebook-2024-7-Oct.-2024.pdf).\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_data <- read.csv(\"acled_africa_1997-2025.csv\")\n```\n:::\n\n\nInformation of the national and sub national administrative boundaries in the Lake Chad Basin is obtained from the HDX. The information comes as a shapefile `.shp` and is available [here](https://data.humdata.org/dataset/lac-chad-basin-area?force_layout=desktop) in a zip file named `lcb_admbnda_adm2_ocha.zip`. The shapefile contains the administrative boundaries of Lake Chad Basin region at the subnational level. In particular, we will use file `lcb_admbnda_adm2_ocha.shp`. I also downloaded the administrative boundaries of the West and Central Africa region available [here](https://data.humdata.org/dataset/west-and-central-africa-administrative-boundaries-levels).\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lake Chad Basin Area - Administrative boundaries for Nigeria, Chad, Cameroon and Niger\nshp_lake_chad_basin <- read_sf(\"lcb_admbnda_adm2_ocha/lcb_admbnda_adm2_ocha.shp\")\n\n# West and Central Africa - Administrative boundaries levels 0 - 2 and Settlements\nwest_central_africa <- read_sf(\"wca_admbnda_adm2_ocha/wca_admbnda_adm2_ocha.shp\")\n```\n:::\n\n\n## Data processing\nAs indicated in the [ACLED's codebook](https://acleddata.com/acleddatanew/wp-content/uploads/dlm_uploads/2024/10/ACLED-Codebook-2024-7-Oct.-2024.pdf), geographic location of the events is specified in columns `latitude` and `longitude` in the `conflict_data` object and they are using the [EPSG:4326](https://epsg.io/4326) coordinate reference system. We have to ensure, that both `shp_lake_chad_basin` and `west_central_africa` have the same coordinate reference system. To achieve this, we use `st_transform()` from {sf} package. \n\n::: {.cell}\n\n```{.r .cell-code}\n# st_transform to convert coordinates to ACLED's data coordinate reference system\nshp_lake_chad_basin <- st_transform(shp_lake_chad_basin,\n  crs = 4326\n)\nwest_central_africa <- st_transform(west_central_africa,\n  crs = 4326\n)\n```\n:::\n\n\nNow, we subset the events to exclusively account for those occurred between 2020 and 2024 in the Lake Chad Basin. To achieve this, we use the {tidyverse} package for data wrangling and {sf} for spatial filtering. By applying the `st_filter` function, we retain only events located within the Lake Chad Basin area.\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_data <- conflict_data |>\n  # Keep only events from 2020 to 2024\n  filter(year >= 2020 & year < 2025) |>\n  # Select only \"Violence against civilians\" events of type \"Attack\"\n  filter(event_type == \"Violence against civilians\" & sub_event_type == \"Attack\") |>\n  # Keep events from Nigeria, Niger, Cameroon, and Chad\n  filter(country %in% c(\"Nigeria\", \"Niger\", \"Cameroon\", \"Chad\")) |>\n  # Extract the month name from event_date\n  mutate(\n    month = month(dmy(event_date),\n      label = TRUE\n    )\n  ) |>\n  # Select only relevant columns\n  select(\n    event_id_cnty, event_date, month, year, event_type, sub_event_type,\n    actor1, actor2, location, latitude, longitude, fatalities, notes\n  )\n\n# Convert the data to a spatial object using latitude and longitude (WGS 84 CRS)\nconflict_data <- st_as_sf(conflict_data,\n  coords = c(\"longitude\", \"latitude\"),\n  crs = 4326\n)\n\n# Filter events that fall within the Lake Chad Basin shapefile\nconflict_data_lake_chad <- conflict_data |>\n  st_filter(shp_lake_chad_basin)\n```\n:::\n\n\nWe then processes administrative boundary data to extract relevant regions in West and Central Africa, focusing on the Lake Chad Basin area.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter to include only countries in the Lake Chad Basin region\n# I included Central African Republic for visualization purposes\nshp_countries <- west_central_africa |>\n  filter(admin0Name %in% c(\"Nigeria\", \"Niger\", \"Chad\", \"Cameroon\", \"Central African Republic\"))\n\n# Create country codes and format administrative division codes\nshp_countries <- shp_countries |>\n  mutate(\n    country_code = case_when(\n      admin0Name == \"Nigeria\" ~ \"NGA\",\n      admin0Name == \"Niger\" ~ \"NER\",\n      admin0Name == \"Chad\" ~ \"TCD\",\n      admin0Name == \"Cameroon\" ~ \"CMR\"\n    ),\n    # Extract and format adm1 and adm2 codes\n    adm1_code = str_pad(str_extract(admin1Pcod, \"\\\\d+\"), 3, pad = \"0\"),\n    adm2_code = str_pad(str_sub(admin2Pcod, 5, 6), 3, pad = \"0\"),\n    # Create a unique administrative code by combining country and division codes\n    adm_code = paste0(country_code, adm1_code, adm2_code)\n  ) |>\n  # Rename columns for clarity\n  rename(\n    country = admin0Name,\n    adm1 = admin1Name,\n    adm2 = admin2Name\n  ) |>\n  # Select only relevant columns\n  select(adm_code, country, adm1, adm2, geometry)\n\n# Identify administrative units within the Lake Chad Basin\nshp_countries <- shp_countries |>\n  mutate(lake_chad_basin = ifelse(adm_code %in% shp_lake_chad_basin$Rowcacode2,\n    \"Yes\", \"No\"\n  ))\n\n# Subset to retain only the administrative units inside the Lake Chad Basin\nshp_lake_chad <- shp_countries |>\n  filter(lake_chad_basin == \"Yes\")\n\n# Compute the bounding box for visualization\nbbox <- st_bbox(shp_lake_chad)\nx_min <- bbox[\"xmin\"]\nx_max <- bbox[\"xmax\"]\ny_min <- bbox[\"ymin\"]\ny_max <- bbox[\"ymax\"]\n\n# Aggregate administrative level 1 (regions/states) within the Lake Chad Basin\nshp_adm1_aggregated <- shp_countries |>\n  group_by(adm1, lake_chad_basin) |>\n  summarise(geometry = st_union(geometry))\n\n# Keep only regions in the Lake Chad Basin and clean names\nshp_adm1_aggregated <- shp_adm1_aggregated |>\n  filter(lake_chad_basin == \"Yes\") |>\n  mutate(adm1 = str_replace_all(adm1, \"_\", \" \")) |>\n  # Compute centroid coordinates for labeling\n  mutate(\n    x = st_coordinates(st_centroid(geometry))[, 1],\n    y = st_coordinates(st_centroid(geometry))[, 2]\n  )\n```\n:::\n\n\nNow, we create a hexagonal grid over the Lake Chad region with a cell size of approximately 10.69 km and fatalities and attack counts are aggregated per grid cell.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reproject Lake Chad Basin shapefile to UTM Zone 33N (EPSG:32633)\n# This is important to set a cell size in km\nshp_lake_chad <- st_transform(shp_lake_chad, crs = 32633)\n\n# Create a hexagonal grid over the Lake Chad Basin with a cell size of ~10.69 km\nnc_grid <- st_make_grid(shp_lake_chad,\n  cellsize = 10690,\n  square = FALSE\n)\n\n# Filter the grid to keep only hexagons intersecting the Lake Chad Basin\nnc_grid_filter <- nc_grid |>\n  st_sf() |>\n  st_filter(shp_lake_chad)\n\n# Reproject the grid and Lake Chad Basin back to WGS84 (EPSG:4326)\nnc_grid_filter <- st_transform(nc_grid_filter, crs = 4326)\nshp_lake_chad <- st_transform(shp_lake_chad, crs = 4326)\n\n# Spatially join conflict data with the hexagonal grid\nconflict_data_grid <- st_join(nc_grid_filter, conflict_data_lake_chad, left = FALSE)\n\n# Aggregate conflict data by grid cell, summing fatalities and counting attacks\nfatalities_per_grid <- conflict_data_grid |>\n  group_by(nc_grid) |>\n  summarise(\n    fatalities = sum(fatalities, na.rm = TRUE),\n    num_attacks = n()\n  ) |>\n  st_as_sf() |>\n  # Compute centroid coordinates for visualization\n  mutate(\n    x = st_coordinates(st_centroid(nc_grid))[, 1],\n    y = st_coordinates(st_centroid(nc_grid))[, 2]\n  )\n```\n:::\n\n\nWe need to relocate the coordinates of the labels for specific regions for better readability. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Adjust label positions for specific administrative regions to improve readability\nshp_adm1_aggregated <- shp_adm1_aggregated |>\n  mutate(\n    x = case_when(\n      adm1 == \"Extreme Nord\" ~ x - 0.1, # Shift label slightly left\n      TRUE ~ x\n    ),\n    y = case_when(\n      adm1 == \"Extreme Nord\" ~ y - 0.5, # Move label downward\n      adm1 == \"Adamawa\" ~ y + 0.3, # Move label upward\n      adm1 == \"Borno\" ~ y - 0.4, # Adjust label downward\n      TRUE ~ y\n    )\n  )\n\n# Aggregate country geometries by merging administrative boundaries\n# Dissolve some shapes\nshp_countries_countries <- shp_countries |>\n  group_by(country) |>\n  summarise(geometry = st_union(geometry)) |>\n  st_cast(\"POLYGON\") |>\n  group_by(country) |>\n  # Retain the largest polygon for each country\n  filter(st_area(geometry) == max(st_area(geometry))) \n\n# Define manual label positions for country names\ncountry_labels <- tibble(\n  country = c(\"Nigeria\", \"Niger\", \"Chad\", \"Cameroon\"),\n  x = c(10.15, 11, 15, 13.6), # X-coordinates for label placement\n  y = c(10, 15, 14.2, 9) # Y-coordinates for label placement\n)\n```\n:::\n\n\nWe first create an empty map of the countries and highlight the Lake Chad Basin area using {ggplot2}.\n\n::: {.cell}\n\n```{.r .cell-code}\nlake_chad_map <- ggplot() +\n\n  # Plot country borders with a light fill color\n  geom_sf(\n    data = shp_countries,\n    fill = \"#ECEFF1\",\n    color = NA,\n    linewidth = 0,\n    inherit.aes = FALSE\n  ) +\n\n  # Plot Lake Chad Basin area with a darker fill color\n  geom_sf(\n    data = shp_lake_chad,\n    fill = \"#E0E0E0\",\n    color = NA,\n    linewidth = 0,\n    inherit.aes = FALSE\n  )\n```\n:::\n\n\nNow, we add the fatalities information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlake_chad_map <- lake_chad_map +\n  # Plot fatalities per grid with a color gradient\n  geom_sf(\n    data = fatalities_per_grid,\n    aes(fill = fatalities),\n    color = NA,\n    alpha = 1\n  ) +\n  scale_fill_gradient(name = \"Fatalities\", \n                      low = \"#FCC5C0\", high = \"#67001F\")\n```\n:::\n\n\nWe add different color to subnational and national boundaries and add their corresponding labels.\n\n::: {.cell}\n\n```{.r .cell-code}\nlake_chad_map <- lake_chad_map +\n  # Plot aggregated administrative region boundaries with white lines\n  geom_sf(\n    data = shp_adm1_aggregated,\n    fill = NA,\n    color = \"white\",\n    linewidth = 0.5\n  ) +\n\n  # Plot country boundaries with black lines\n  geom_sf(\n    data = shp_countries_countries,\n    fill = NA,\n    color = \"black\",\n    linewidth = 1.25\n  ) +\n  # Add labels for administrative regions (e.g., \"Extreme Nord\")\n  geom_text(\n    data = shp_adm1_aggregated,\n    aes(\n      x = x, y = y,\n      # Wrap text if needed for long region names\n      label = str_wrap(adm1, 1) \n    ),\n    colour = \"#999\",\n    fontface = \"bold\",\n    size = 3\n  ) +\n\n  # Add labels for countries with a larger font\n  geom_label(\n    data = country_labels,\n    aes(x = x, y = y, label = country),\n    colour = \"black\",\n    fontface = \"bold\",\n    size = 4\n  )\n```\n:::\n\n\nFinally, we center the map at the Lake Chad Basin area and add format for a better visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Automatically use showtext for handling fonts\nshowtext_auto()\n\n# Add Google font \"Roboto Condensed\"\nfont_add_google(\"Roboto Condensed\", \"roboto\")\n\n# Title, subtitle, and caption for the waffle chart\ntitle_chart <- \"Armed conflict in the Lake Chad Basin, 2020-2024\"\nsubtitle_chart <- \"Fatalities in attacks perpetrated by organized armed actors against civilians\"\ncaption_chart <- \"Data: ACLED | Graphic: Juan Torres Mungu√≠a\"\n\nlake_chad_map <- lake_chad_map +\n\n  labs(\n    title = title_chart,\n    subtitle = subtitle_chart,\n    caption = caption_chart,\n    x = \"\",\n    y = \"\",\n    fill = \"\"\n  ) +\n\n  # Set the map's coordinate limits and prevent expansion\n  coord_sf(\n    xlim = c(x_min, x_max),\n    ylim = c(y_min, y_max),\n    expand = FALSE\n  ) +\n\n  # Add a scale bar in the bottom left\n  annotation_scale(location = \"bl\", width_hint = 0.2) +\n\n  # Add a north arrow in the top left corner\n  annotation_north_arrow(\n    location = \"tl\",\n    which_north = \"true\",\n    style = north_arrow_fancy_orienteering,\n    height = unit(1, \"cm\"),\n    width = unit(1, \"cm\")\n  ) +\n\n  # Customize the legend\n  guides(\n    fill = guide_legend(position = \"bottom\")\n  ) +\n\n  # Set the base theme without any background elements\n  theme_void(base_family = \"roboto\") +\n\n  # Customize the map's text and legend styling\n  theme(\n    # Title settings\n    plot.title.position = \"plot\", # Position of the title\n    plot.title = element_textbox(\n      color = \"black\",\n      face = \"bold\",\n      size = 22,\n      margin = margin(5, 0, 5, 0), # Top, right, bottom, left\n      # Width of the title, npc == 1 corresponds to the full width of the plot\n      width = unit(1, \"npc\") \n    ),\n    plot.subtitle = element_textbox(\n      color = \"grey50\",\n      face = \"bold\",\n      size = 14,\n      margin = margin(20, 0, 10, 0),\n      width = unit(1, \"npc\")\n    ),\n\n    # Caption settings\n    plot.caption = element_textbox(\n      color = \"grey70\",\n      face = \"italic\",\n      size = 10,\n      margin = margin(10, 0, 5, 0),\n      width = unit(1, \"npc\")\n    ),\n    legend.title = element_text(hjust = 0.5, color = \"black\", face = \"bold\"),\n    legend.text = element_text(color = \"black\", face = \"bold\"),\n    legend.direction = \"horizontal\",\n    legend.title.position = \"top\",\n    legend.text.position = \"bottom\",\n    legend.key.size = unit(0.65, units = \"cm\"),\n    legend.background = element_rect(fill = NA, color = NA),\n    legend.margin = margin(t = 5, r = 10, b = 5, l = 10),\n    plot.background = element_rect(fill = \"#ECEFF1\", color = NA)\n  )\n```\n:::\n\n\nWe create a zoomed-in map of the Lake Chad Basin inset within the African continent, using ggplot2. It includes the ne_countries function from the {rnaturalearth} package to retrieve the map of Africa. The map of the Lake Chad Basin is overlaid on top of Africa, and a rectangle is drawn to highlight the region of interest (Lake Chad Basin). The map is customized with a white background and black borders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch African countries map from the rnaturalearth package\nafrica <- ne_countries(continent = \"Africa\", returnclass = \"sf\")\n\n# Create a zoomed-in map of Lake Chad Basin within the African map\nlake_chad_map_zoom <- ggplot() +\n\n  # Plot the Africa map with a light fill color\n  geom_sf(\n    data = africa,\n    fill = \"#ECEFF1\",\n    color = NA,\n    linewidth = 0,\n    inherit.aes = FALSE\n  ) +\n\n  # Plot Lake Chad Basin area with a darker fill color\n  geom_sf(\n    data = shp_lake_chad,\n    fill = \"#E0E0E0\",\n    color = NA,\n    linewidth = 0,\n    inherit.aes = FALSE\n  ) +\n\n  # Add a rectangle highlighting the Lake Chad Basin on the Africa map\n  geom_rect(\n    aes(xmin = x_min, xmax = x_max, ymin = y_min, ymax = y_max),\n    color = \"black\",\n    fill = NA,\n    linewidth = 0.2\n  ) +\n\n  # Remove grid and axes for a clean map appearance\n  theme_void() +\n\n  # Customize borders and background of the map\n  theme(\n    panel.border = element_rect(\n      color = \"black\",\n      fill = NA,\n      size = 0.8\n    ),\n    plot.background = element_rect(fill = \"white\")\n  )\n```\n:::\n\n\nFinally, we combine the main map of the Lake Chad Basin with an inset map of Africa showing the location of the Lake Chad Basin. The inset map is positioned within the main map using the `inset_element()` function of the {patchwork} package. Additionally, we set the resolution of the saved image to 320 dpi (high resolution) for better quality. Finally, the map is saved as a PNG file using `ggsave()`\n\n::: {.cell}\n\n```{.r .cell-code}\n# locate main and inset map\nlake_chad_map +\n  inset_element(\n    align_to = \"plot\",\n    lake_chad_map_zoom,\n    right = 1,\n    left = 0.84,\n    top = 1,\n    bottom = 0.91,\n    on_top = TRUE\n  )\n```\n\n```{.r .cell-code}\n# Set the resolution of the image 320 dpi is for high-quality images (\"retina\")\nshowtext_opts(dpi = 320) \nggsave(\n  \"lake-chad-map.png\",\n  dpi = 320,\n  width = 12,\n  height = 9,\n  units = \"in\"\n)\nshowtext_auto(FALSE)\n```\n:::\n\n\n![](lake-chad-map.png){width=100% style=\"margin-top: 0px; margin-bottom: 0px;\"}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}