{"title":"Making interactive choropleths for disease outbreaks data using leaflet in R","markdown":{"yaml":{"title":"Making interactive choropleths for disease outbreaks data using leaflet in R","author":"Juan Armando Torres Mungu√≠a, PhD","date":"2024-10-15","categories":["leaflet","maps","code"],"image":"image.png","title-block-banner":false,"format":{"html":{"css":"css/styles_blog.css"}}},"headingText":"Unique DONs","containsRefs":false,"markdown":"\n\nIn these notes, you'll learn how to load the data from the <a href=\"https://github.com/jatorresmunguia/disease_outbreak_news\" target=\"_blank\">GitHub repository</a> of the **disease outbreaks project** and use the `leaflet` library in **R** to create a choropleth map showing the geographic distribution of disease outbreaks from 1996 to September 30, 2024. \n\nThe final output will look like this:\n\n```{r map_outbreaks_all, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE}\n\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(sf)\nlibrary(bslib)\n\n# Define the GitHub raw content URL\nurl_api <- \"https://api.github.com/repos/jatorresmunguia/disease_outbreak_news/contents/Last%20update\"\nlast_file <- fromJSON(content(GET(url_api), as = \"text\"))$name[grepl(fromJSON(content(GET(url_api), as = \"text\"))$name, pattern = paste0(\"^outbreaks\"))]\n\nrdata_file <- last_file[grepl(\".csv$\", last_file)]\nfile_name <- basename(rdata_file)\ndate_string <- sub(\".*_(\\\\d{2})(\\\\d{2})(\\\\d{4}).*\", \"\\\\1-\\\\2-\\\\3\", file_name)\ndate_obj <- dmy(date_string)\n\nformatted_date <- format(date_obj, \"%d/%m/%Y\")  \nformatted_month <- format(date_obj, \"%B %d, %Y\")     \n\noutbreaks <- read.csv(paste0(\"https://raw.githubusercontent.com/jatorresmunguia/disease_outbreak_news/refs/heads/main/Last%20update\", \"/\", rdata_file),\n                      header = TRUE)\n\noutbreaks <- outbreaks |>\n  mutate(across(c(icd104n, iso3, Country), \n                ~ factor(str_squish(as.character(.)))))\n\n# geographic data all countries\n# Load the shapefile into R\nurl_shp <- \"/vsicurl/https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/shp_outbreaks.shp\"\nshpsf <- st_read(url_shp, quiet = TRUE)\n\nshpsf_unique <- shpsf |> \n  st_drop_geometry() |>\n  distinct(iso3, .keep_all = TRUE)\n\noutbreaks <- shpsf_unique |>\n  select(iso3, continent) |>\n  right_join(outbreaks, by = \"iso3\") \n\nrm(url_shp, shpsf_unique, date_obj, date_string, file_name, last_file, rdata_file, url_api)\n\ntag.map.title <- tags$style(HTML(\"\n  .leaflet-control.map-title { \n    left: 50%;  /* Center horizontally */\n    transform: translateX(-50%);  /* centering */\n    text-align: left;\n    padding-left: 10px; \n    padding-right: 10px; \n    background: rgba(255,255,255,0.75);\n    font-weight: bold;\n    font-size: 20px;\n    color: black;\n  }\n\"))\n\nknitr::opts_chunk$set(echo = TRUE)\noptions(prompt = \"R> \", digits = 4, scipen = 999)\n\ntitle <- tags$div(\n  tag.map.title, HTML(\"Geographic distribution of disease outbreaks, Jan 1996-Sep 2024\")\n)\n\noutbreaks_all <- outbreaks |> \n  select(-c(continent, Country)) |>\n  group_by(iso3) |>\n  summarise(outbreaks = n(), .groups = 'drop') |>\n  right_join(shpsf, by = \"iso3\") |> \n  mutate(outbreaks = replace_na(outbreaks, 0)) |>\n  st_as_sf()\n\nmybins <- c(0, 10, 20, 30, 40, 50, 60, 70)\nmypalette <- colorBin(palette = \"PuRd\", \n                      domain = outbreaks_all$outbreaks,\n                      na.color = \"transparent\", bins = mybins)\n\nmytext <- paste0(\"<b>\", outbreaks_all$Country, \"</b>\", \"<br/>\",\n                outbreaks_all$outbreaks, \" \", \"outbreaks\"\n                ) |>\n  lapply(htmltools::HTML)\n\nleaflet(outbreaks_all,\n        options = leafletOptions(zoomControl = FALSE)) |>\n  addTiles() |> \n  addProviderTiles(providers$Esri.WorldTopoMap) |>\nsetView(lat = 10, lng = 0, zoom = 2) |>\n  addPolygons(\n    fillColor = ~ mypalette(outbreaks),\n    stroke = TRUE,\n    fillOpacity = 0.9,\n    color = \"white\",\n    weight = 0.3,\n    label = mytext,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"13px\",\n      direction = \"auto\"\n      )\n    ) |>\n  addLegend(\n    pal = mypalette, values = ~outbreaks, opacity = 0.9,\n    title = paste0(\"Number of\", \"<br/>\", \"outbreaks:\"),\n    position = \"bottomleft\"\n    ) %>%\n  addControl(title, position = \"topleft\", className=\"map-title\") |>\n  onRender(\"function(el, x) {\n          L.control.zoom({position:'topright'}).addTo(this);\n          }\") |>\n  card(full_screen = TRUE)\n\n```\n\n### Step 1: Load libraries\nThe following packages are required to replicate the choropleth map.\n```{r load_packages, include=TRUE, message=FALSE, warning=FALSE}\n\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(sf)\nlibrary(bslib)\n\n```\n\n### Step 2: Load data from GitHub\nNow, let's fetch the latest disease outbreaks data from the GitHub repository using the GitHub API. The file's name changes according to the last update, having a pattern beginning with the prefix \"outbreaks_\", followed by the date of last update. For instance, for the version updated on September 30, 2024, the corresponding .csv file is `outbreaks_30092024.csv`.\n```{r load_data, include=TRUE, message=FALSE, warning=FALSE}\n\n# Define the GitHub raw content URL\nurl_api <- \"https://api.github.com/repos/jatorresmunguia/disease_outbreak_news/contents/Last%20update\"\nlast_file <- fromJSON(content(GET(url_api), as = \"text\"))$name[grepl(fromJSON(content(GET(url_api), as = \"text\"))$name, pattern = paste0(\"^outbreaks\"))]\n\nrdata_file <- last_file[grepl(\".csv$\", last_file)]\nfile_name <- basename(rdata_file)\ndate_string <- sub(\".*_(\\\\d{2})(\\\\d{2})(\\\\d{4}).*\", \"\\\\1-\\\\2-\\\\3\", file_name)\ndate_obj <- dmy(date_string)\n\nformatted_date <- format(date_obj, \"%d/%m/%Y\")  \nformatted_month <- format(date_obj, \"%B %d, %Y\")     \n\noutbreaks <- read.csv(paste0(\"https://raw.githubusercontent.com/jatorresmunguia/disease_outbreak_news/refs/heads/main/Last%20update\", \"/\", rdata_file),\n                      header = TRUE)\n\n# Ensure no extra blanks in country names\noutbreaks <- outbreaks |>\n  mutate(across(c(icd104n, iso3, Country), \n                ~ factor(str_squish(as.character(.)))))\n\n```\n\n### Step 3: Load geospatial data\nTo produce the choropleth maps, it is required to get the country administrative boundaries from a geospatial object. In this tutorial, the **shapefile** <a href=\"https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/\" target=\"_blank\">located in our GitHub</a> is used.\n```{r geo_data, include=TRUE, message=FALSE, warning=FALSE}\n\n# URL for the ZIP file containing the shapefile (administrative boundaries)\nurl_shp <- \"/vsicurl/https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/shp_outbreaks.shp\"\n\nshpsf <- st_read(url_shp, quiet = TRUE)\n\n```\n\n### Step 4: Reshape the data\nHere, we summarize the outbreaks data by iso3 code, year, and disease, and calculate the total number of outbreaks per country, and reshape to long format.\n```{r filter_data, include=TRUE, message=FALSE, warning=FALSE}\n\nshpsf_unique <- shpsf |> \n  st_drop_geometry() |>\n  distinct(iso3, .keep_all = TRUE)\n\noutbreaks <- shpsf_unique |>\n  select(iso3, continent) |>\n  right_join(outbreaks, by = \"iso3\") \n\ndata_base <- outbreaks |> \n  # Group the data\n  group_by(iso3, Year, icd104n) |> \n  # Summarize the number of outbreaks\n  summarise(count = n(), .groups = 'drop') |> \n  # Reshape to wide format\n  pivot_wider(names_from = icd104n, values_from = count, values_fill = 0) \n\ndata_base <- data_base |> \n  # Replace missing values (NA) with 0\n  mutate(across(-c(iso3, Year), ~replace(., is.na(.), 0))) |> \n  # Calculate the total outbreaks per country\n  mutate(`All diseases` = rowSums(across(-c(iso3, Year)))) |> \n  # Reshape to long format\n  pivot_longer(!c(iso3, Year), names_to = \"Disease\", values_to = \"outbreaks\") \n\n```\n\n### Step 5: Add the geographic attributes to the outbreaks data\nAfter loading the shapefile containing the administrative boundaries for countries, we need to integrate this geographic information into the **disease outbreaks data**. To do this, we have to merge the **data_base** object with the **shpsf** using **iso3** country codes as key variable.\n```{r merge_data, include=TRUE, message=FALSE, warning=FALSE}\n\noutbreaks_all <- data_base |> \n  # Filter the data to include only the \"All diseases\" category, which represents the total number of outbreaks per country.\n  # Here, you can also select a particular disease\n  filter(Disease == \"All diseases\") |> \n  # Group the data by country code (iso3) and summarize the total number of outbreaks for each country.\n  group_by(iso3) |> \n  summarise(outbreaks = sum(outbreaks)) |> \n  # Perform a right join with the spatial data (`shpsf`) to combine the outbreak data with geographical boundaries.\n  right_join(shpsf, by = \"iso3\") |> \n  # Convert the resulting data into a spatial data frame using `st_as_sf()` to prepare for mapping.\n  mutate(outbreaks = replace_na(outbreaks, 0)) |>\n  st_as_sf()\n\n```\n\n**Note:** You can also use filter(between(Year, left = , right = )) to exclusively include a subset of observations by specifying a date range. For example, setting left = 2010 and right = 2020 would filter the data to only include outbreaks that occurred between 2010 and 2020. This is useful when you want to focus on a specific time period within your dataset.\n\n### Step 6: Making the interactive map\nTo create the interactive choropleth map using `leaflet` library, we first set up a palette to categorize the number of outbreaks into bins, which is essential for visual differentiation on the choropleth map. \n```{r palette, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Define the color palette with bins for categorizing outbreak numbers\nmybins <- c(0, 10, 20, 30, 40, 50, 60, 70)\nmypalette <- colorBin(palette = \"PuRd\", \n                      domain = outbreaks_all$outbreaks,\n                      na.color = \"transparent\", bins = mybins)\n\n```\n\nThen, we create labels to display the country name and the number of outbreaks when hovering over the choropleth map.\n```{r labels, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Create labels for each country\nmytext <- paste0(\"<b>\", outbreaks_all$Country, \"</b>\", \"<br/>\",\n                outbreaks_all$outbreaks, \" \", \"outbreaks\"\n                ) |> \n  lapply(htmltools::HTML)\n\n```\n\nAdd a title for the map\n```{r title, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Add map title\ntag.map.title <- tags$style(HTML(\"\n  .leaflet-control.map-title { \n    left: 50%;  \n    transform: translateX(-50%);\n    text-align: left;\n    padding-left: 10px; \n    padding-right: 10px; \n    background: rgba(255,255,255,0.75);\n    font-weight: bold;\n    font-size: 20px;\n    color: black;\n  }\n\"))\n\n# Create the map\ntitle <- tags$div(\n  tag.map.title, HTML(\"Geographic distribution of disease outbreaks, Jan 1996-Sep 2024\")\n)\n\n```\n\nFinally, we set up the Leaflet map with tiles, polygons, labels, a legend, and a title.\n\n```{r map_leaflet, include=TRUE, message=FALSE, warning=FALSE, results='asis'}\n\nleaflet(outbreaks_all, options = leafletOptions(zoomControl = FALSE)) |>\n  addTiles() |> \n  addProviderTiles(providers$Esri.WorldTopoMap) |>\n  setView(lat = 10, lng = 0, zoom = 2) |>\n  # Add polygons for countries and their outbreak data\n  addPolygons(\n    fillColor = ~mypalette(outbreaks),\n    stroke = TRUE,\n    fillOpacity = 0.9,\n    color = \"white\",\n    weight = 0.3,\n    label = mytext,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"13px\",\n      direction = \"auto\"\n    )\n  ) |>\n  # Add a legend to explain the color scale\n  addLegend(\n    pal = mypalette, values = ~outbreaks, opacity = 0.9,\n    title = \"Number of outbreaks:\",\n    position = \"bottomleft\"\n  ) |>\n  # Add the title to the map\n  addControl(title, position = \"topleft\", className = \"map-title\") |>\n  # Re-add the zoom control to the top-right corner\n  onRender(\"function(el, x) {\n          L.control.zoom({position:'topright'}).addTo(this);\n          }\")\n\n```\n\n**Note:** You can add `card(full_screen = TRUE)` from `bslib` library to add an icon to expand the card's size to the browser window.\n","srcMarkdownNoYaml":"\n\nIn these notes, you'll learn how to load the data from the <a href=\"https://github.com/jatorresmunguia/disease_outbreak_news\" target=\"_blank\">GitHub repository</a> of the **disease outbreaks project** and use the `leaflet` library in **R** to create a choropleth map showing the geographic distribution of disease outbreaks from 1996 to September 30, 2024. \n\nThe final output will look like this:\n\n```{r map_outbreaks_all, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE}\n\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(sf)\nlibrary(bslib)\n\n# Unique DONs\n# Define the GitHub raw content URL\nurl_api <- \"https://api.github.com/repos/jatorresmunguia/disease_outbreak_news/contents/Last%20update\"\nlast_file <- fromJSON(content(GET(url_api), as = \"text\"))$name[grepl(fromJSON(content(GET(url_api), as = \"text\"))$name, pattern = paste0(\"^outbreaks\"))]\n\nrdata_file <- last_file[grepl(\".csv$\", last_file)]\nfile_name <- basename(rdata_file)\ndate_string <- sub(\".*_(\\\\d{2})(\\\\d{2})(\\\\d{4}).*\", \"\\\\1-\\\\2-\\\\3\", file_name)\ndate_obj <- dmy(date_string)\n\nformatted_date <- format(date_obj, \"%d/%m/%Y\")  \nformatted_month <- format(date_obj, \"%B %d, %Y\")     \n\noutbreaks <- read.csv(paste0(\"https://raw.githubusercontent.com/jatorresmunguia/disease_outbreak_news/refs/heads/main/Last%20update\", \"/\", rdata_file),\n                      header = TRUE)\n\noutbreaks <- outbreaks |>\n  mutate(across(c(icd104n, iso3, Country), \n                ~ factor(str_squish(as.character(.)))))\n\n# geographic data all countries\n# Load the shapefile into R\nurl_shp <- \"/vsicurl/https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/shp_outbreaks.shp\"\nshpsf <- st_read(url_shp, quiet = TRUE)\n\nshpsf_unique <- shpsf |> \n  st_drop_geometry() |>\n  distinct(iso3, .keep_all = TRUE)\n\noutbreaks <- shpsf_unique |>\n  select(iso3, continent) |>\n  right_join(outbreaks, by = \"iso3\") \n\nrm(url_shp, shpsf_unique, date_obj, date_string, file_name, last_file, rdata_file, url_api)\n\ntag.map.title <- tags$style(HTML(\"\n  .leaflet-control.map-title { \n    left: 50%;  /* Center horizontally */\n    transform: translateX(-50%);  /* centering */\n    text-align: left;\n    padding-left: 10px; \n    padding-right: 10px; \n    background: rgba(255,255,255,0.75);\n    font-weight: bold;\n    font-size: 20px;\n    color: black;\n  }\n\"))\n\nknitr::opts_chunk$set(echo = TRUE)\noptions(prompt = \"R> \", digits = 4, scipen = 999)\n\ntitle <- tags$div(\n  tag.map.title, HTML(\"Geographic distribution of disease outbreaks, Jan 1996-Sep 2024\")\n)\n\noutbreaks_all <- outbreaks |> \n  select(-c(continent, Country)) |>\n  group_by(iso3) |>\n  summarise(outbreaks = n(), .groups = 'drop') |>\n  right_join(shpsf, by = \"iso3\") |> \n  mutate(outbreaks = replace_na(outbreaks, 0)) |>\n  st_as_sf()\n\nmybins <- c(0, 10, 20, 30, 40, 50, 60, 70)\nmypalette <- colorBin(palette = \"PuRd\", \n                      domain = outbreaks_all$outbreaks,\n                      na.color = \"transparent\", bins = mybins)\n\nmytext <- paste0(\"<b>\", outbreaks_all$Country, \"</b>\", \"<br/>\",\n                outbreaks_all$outbreaks, \" \", \"outbreaks\"\n                ) |>\n  lapply(htmltools::HTML)\n\nleaflet(outbreaks_all,\n        options = leafletOptions(zoomControl = FALSE)) |>\n  addTiles() |> \n  addProviderTiles(providers$Esri.WorldTopoMap) |>\nsetView(lat = 10, lng = 0, zoom = 2) |>\n  addPolygons(\n    fillColor = ~ mypalette(outbreaks),\n    stroke = TRUE,\n    fillOpacity = 0.9,\n    color = \"white\",\n    weight = 0.3,\n    label = mytext,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"13px\",\n      direction = \"auto\"\n      )\n    ) |>\n  addLegend(\n    pal = mypalette, values = ~outbreaks, opacity = 0.9,\n    title = paste0(\"Number of\", \"<br/>\", \"outbreaks:\"),\n    position = \"bottomleft\"\n    ) %>%\n  addControl(title, position = \"topleft\", className=\"map-title\") |>\n  onRender(\"function(el, x) {\n          L.control.zoom({position:'topright'}).addTo(this);\n          }\") |>\n  card(full_screen = TRUE)\n\n```\n\n### Step 1: Load libraries\nThe following packages are required to replicate the choropleth map.\n```{r load_packages, include=TRUE, message=FALSE, warning=FALSE}\n\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(leaflet)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(RColorBrewer)\nlibrary(htmlwidgets)\nlibrary(htmltools)\nlibrary(sf)\nlibrary(bslib)\n\n```\n\n### Step 2: Load data from GitHub\nNow, let's fetch the latest disease outbreaks data from the GitHub repository using the GitHub API. The file's name changes according to the last update, having a pattern beginning with the prefix \"outbreaks_\", followed by the date of last update. For instance, for the version updated on September 30, 2024, the corresponding .csv file is `outbreaks_30092024.csv`.\n```{r load_data, include=TRUE, message=FALSE, warning=FALSE}\n\n# Define the GitHub raw content URL\nurl_api <- \"https://api.github.com/repos/jatorresmunguia/disease_outbreak_news/contents/Last%20update\"\nlast_file <- fromJSON(content(GET(url_api), as = \"text\"))$name[grepl(fromJSON(content(GET(url_api), as = \"text\"))$name, pattern = paste0(\"^outbreaks\"))]\n\nrdata_file <- last_file[grepl(\".csv$\", last_file)]\nfile_name <- basename(rdata_file)\ndate_string <- sub(\".*_(\\\\d{2})(\\\\d{2})(\\\\d{4}).*\", \"\\\\1-\\\\2-\\\\3\", file_name)\ndate_obj <- dmy(date_string)\n\nformatted_date <- format(date_obj, \"%d/%m/%Y\")  \nformatted_month <- format(date_obj, \"%B %d, %Y\")     \n\noutbreaks <- read.csv(paste0(\"https://raw.githubusercontent.com/jatorresmunguia/disease_outbreak_news/refs/heads/main/Last%20update\", \"/\", rdata_file),\n                      header = TRUE)\n\n# Ensure no extra blanks in country names\noutbreaks <- outbreaks |>\n  mutate(across(c(icd104n, iso3, Country), \n                ~ factor(str_squish(as.character(.)))))\n\n```\n\n### Step 3: Load geospatial data\nTo produce the choropleth maps, it is required to get the country administrative boundaries from a geospatial object. In this tutorial, the **shapefile** <a href=\"https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/\" target=\"_blank\">located in our GitHub</a> is used.\n```{r geo_data, include=TRUE, message=FALSE, warning=FALSE}\n\n# URL for the ZIP file containing the shapefile (administrative boundaries)\nurl_shp <- \"/vsicurl/https://github.com/jatorresmunguia/outbreaks_dashboard/raw/main/Data/shp_outbreaks.shp\"\n\nshpsf <- st_read(url_shp, quiet = TRUE)\n\n```\n\n### Step 4: Reshape the data\nHere, we summarize the outbreaks data by iso3 code, year, and disease, and calculate the total number of outbreaks per country, and reshape to long format.\n```{r filter_data, include=TRUE, message=FALSE, warning=FALSE}\n\nshpsf_unique <- shpsf |> \n  st_drop_geometry() |>\n  distinct(iso3, .keep_all = TRUE)\n\noutbreaks <- shpsf_unique |>\n  select(iso3, continent) |>\n  right_join(outbreaks, by = \"iso3\") \n\ndata_base <- outbreaks |> \n  # Group the data\n  group_by(iso3, Year, icd104n) |> \n  # Summarize the number of outbreaks\n  summarise(count = n(), .groups = 'drop') |> \n  # Reshape to wide format\n  pivot_wider(names_from = icd104n, values_from = count, values_fill = 0) \n\ndata_base <- data_base |> \n  # Replace missing values (NA) with 0\n  mutate(across(-c(iso3, Year), ~replace(., is.na(.), 0))) |> \n  # Calculate the total outbreaks per country\n  mutate(`All diseases` = rowSums(across(-c(iso3, Year)))) |> \n  # Reshape to long format\n  pivot_longer(!c(iso3, Year), names_to = \"Disease\", values_to = \"outbreaks\") \n\n```\n\n### Step 5: Add the geographic attributes to the outbreaks data\nAfter loading the shapefile containing the administrative boundaries for countries, we need to integrate this geographic information into the **disease outbreaks data**. To do this, we have to merge the **data_base** object with the **shpsf** using **iso3** country codes as key variable.\n```{r merge_data, include=TRUE, message=FALSE, warning=FALSE}\n\noutbreaks_all <- data_base |> \n  # Filter the data to include only the \"All diseases\" category, which represents the total number of outbreaks per country.\n  # Here, you can also select a particular disease\n  filter(Disease == \"All diseases\") |> \n  # Group the data by country code (iso3) and summarize the total number of outbreaks for each country.\n  group_by(iso3) |> \n  summarise(outbreaks = sum(outbreaks)) |> \n  # Perform a right join with the spatial data (`shpsf`) to combine the outbreak data with geographical boundaries.\n  right_join(shpsf, by = \"iso3\") |> \n  # Convert the resulting data into a spatial data frame using `st_as_sf()` to prepare for mapping.\n  mutate(outbreaks = replace_na(outbreaks, 0)) |>\n  st_as_sf()\n\n```\n\n**Note:** You can also use filter(between(Year, left = , right = )) to exclusively include a subset of observations by specifying a date range. For example, setting left = 2010 and right = 2020 would filter the data to only include outbreaks that occurred between 2010 and 2020. This is useful when you want to focus on a specific time period within your dataset.\n\n### Step 6: Making the interactive map\nTo create the interactive choropleth map using `leaflet` library, we first set up a palette to categorize the number of outbreaks into bins, which is essential for visual differentiation on the choropleth map. \n```{r palette, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Define the color palette with bins for categorizing outbreak numbers\nmybins <- c(0, 10, 20, 30, 40, 50, 60, 70)\nmypalette <- colorBin(palette = \"PuRd\", \n                      domain = outbreaks_all$outbreaks,\n                      na.color = \"transparent\", bins = mybins)\n\n```\n\nThen, we create labels to display the country name and the number of outbreaks when hovering over the choropleth map.\n```{r labels, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Create labels for each country\nmytext <- paste0(\"<b>\", outbreaks_all$Country, \"</b>\", \"<br/>\",\n                outbreaks_all$outbreaks, \" \", \"outbreaks\"\n                ) |> \n  lapply(htmltools::HTML)\n\n```\n\nAdd a title for the map\n```{r title, include=TRUE, message=FALSE, warning=FALSE, results='hide'}\n\n# Add map title\ntag.map.title <- tags$style(HTML(\"\n  .leaflet-control.map-title { \n    left: 50%;  \n    transform: translateX(-50%);\n    text-align: left;\n    padding-left: 10px; \n    padding-right: 10px; \n    background: rgba(255,255,255,0.75);\n    font-weight: bold;\n    font-size: 20px;\n    color: black;\n  }\n\"))\n\n# Create the map\ntitle <- tags$div(\n  tag.map.title, HTML(\"Geographic distribution of disease outbreaks, Jan 1996-Sep 2024\")\n)\n\n```\n\nFinally, we set up the Leaflet map with tiles, polygons, labels, a legend, and a title.\n\n```{r map_leaflet, include=TRUE, message=FALSE, warning=FALSE, results='asis'}\n\nleaflet(outbreaks_all, options = leafletOptions(zoomControl = FALSE)) |>\n  addTiles() |> \n  addProviderTiles(providers$Esri.WorldTopoMap) |>\n  setView(lat = 10, lng = 0, zoom = 2) |>\n  # Add polygons for countries and their outbreak data\n  addPolygons(\n    fillColor = ~mypalette(outbreaks),\n    stroke = TRUE,\n    fillOpacity = 0.9,\n    color = \"white\",\n    weight = 0.3,\n    label = mytext,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"13px\",\n      direction = \"auto\"\n    )\n  ) |>\n  # Add a legend to explain the color scale\n  addLegend(\n    pal = mypalette, values = ~outbreaks, opacity = 0.9,\n    title = \"Number of outbreaks:\",\n    position = \"bottomleft\"\n  ) |>\n  # Add the title to the map\n  addControl(title, position = \"topleft\", className = \"map-title\") |>\n  # Re-add the zoom control to the top-right corner\n  onRender(\"function(el, x) {\n          L.control.zoom({position:'topright'}).addTo(this);\n          }\")\n\n```\n\n**Note:** You can add `card(full_screen = TRUE)` from `bslib` library to add an icon to expand the card's size to the browser window.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../css/styles.css","css/styles_blog.css"],"toc":false,"highlight-style":"tango","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","resources":["../../../googled4bd6494d657ebff.html"],"editor":"source","theme":"flatly","mainfont":"Signika","fontawesome":true,"page-layout":"full","title":"Making interactive choropleths for disease outbreaks data using leaflet in R","author":"Juan Armando Torres Mungu√≠a, PhD","date":"2024-10-15","categories":["leaflet","maps","code"],"image":"image.png","title-block-banner":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}